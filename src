# using juypyter notebook for the simulation 
------>Monte Carlo Sims<-------

import pandas_datareader.data as web
import pandas as pd
from pandas import Series, DataFrame
import datetime as dt
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')

start = dt.datetime(2017, 1, 3)
end = dt.datetime(2017, 11, 20)

prices = web.DataReader('AAPL', 'yahoo', start, end)['Close']
returns = prices.pct_change()


last_price = prices[-1]

simulation_df = pd.DataFrame()


for x in range(num_simulations):
    count = 0
    daily_vol = returns.std()
    
    price_series = []
    
    price = last_price * (1 + np.random.normal(0, daily_vol))
    price_series.append(price)
    
    for y in range(num_days):
        if count == 251:
            break
        price = price_series[count] * (1 + np.random.normal(0, daily_vol))
        price_series.append(price)
        count += 1
    simulation_df[x] = price_series


fig = plt.figure()
fig.suptitle('Monte Carlo Simulation: AAPL')
plt.plot(simulation_df)
plt.axhline(y = last_price, color = 'r', linestyle = '-')
plt.xlabel('Day')
plt.ylabel('Price')
plt.show()


simulation_df.head(10)

simulation_df.isnull().sum()

import locale
locale.setlocale(locale.LC_ALL, "")
pv = 10000
time_horizon = 30 
i =.07
addition = 10000
for year in range (time_horizon):
    ending = pv *(1+i) + addition 
    print(locale.currency(ending, grouping=True))
    pv=ending

print("\tReturn","\t\tEnding Value".rjust(18))
for year in range (time_horizon):
    market_return = np.random.normal(expected_returns, volatility)
    fv = pv1*(1+market_return)+addition
    print('\t{}'.ljust(10).format(round(market_return,4)),'\t{}'.rjust(10).format(locale.currency(fv, grouping=True)))
    pv1 = fv

sims = DataFrame()
itera = 5000

for x in range (itera):
    pv1 = 10000
    time_horizon = 30 
    expected_returns =.09
    volatility = .18
    addition = 10000
    empty= []
    for xx in range(time_horizon):
        new = round(pv1*(1+np.random.normal(expected_returns, volatility))+addition,2)
        empty.append(new)
        pv1=new
    sims[x]=empty
        
first_ten = list(range(10))
sims[first_ten]

plt.plot(sims[first_ten])

print('count:', len(sims.loc[29]))
print('mean:', locale.currency(np.mean(sims.loc[29]),grouping=True))
print('SD:', locale.currency(np.std(sims.loc[29]),grouping=True))
print('Max:', locale.currency(np.max(sims.loc[29]),grouping=True))
print('Min:', locale.currency(np.min(sims.loc[29]),grouping=True))

ending_values = sims.loc[29]
ending_values.describe()


plt.hist(ending_values, bins=150)

print(len(ending_values[ending_values<1000000])/len(ending_values)*100,"%")

p_title = np.percentile(ending_values,[5,10,25, 50, 75, 85, 90, 95])
for x in range(len(p_title)):
    l=[5,10,25, 50, 75, 85, 90, 95]
    print("{}%".format(l[x]).rjust(10),"{}".format(locale.currency(p_title[x],grouping=True)))
